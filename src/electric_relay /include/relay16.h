#ifndef _RELAY16_H
#define _RELAY16_H

#include <string>
#include <rclcpp/rclcpp.hpp>
#include <memory>
#include <iostream>
#include <fstream>
#include <ctime>
#include <jsoncpp/json/json.h>
#include <pwd.h>
#include <vector>

#include <std_msgs/msg/string.hpp>
#include <std_msgs/msg/int8.hpp>
#include <std_msgs/msg/int8_multi_array.hpp>

/*
信号机配置：
电气连接：接常开端子
*/

pthread_t test_thread_id;
pthread_t tcp_thread_id;
pthread_t main_thread_id;
/*MEC 16路网络继电器　服务器　配置*/
char TCP_ServerIP[16];
int TCP_ServerPort;

#pragma pack(1) // 结构体1字节对齐
// 定义服务器端存放客户端信息的结构
struct TCPClientInfo
{
	int clientfd; // 客户端的套接字描述符
	char ip[16];  // 存放 32位 ip地址
	int port;
	struct sockaddr_in sockaddr;
	socklen_t addrlen;
	pthread_t ClientThread_id;
	bool ack;
	bool connect_state;
};

struct TCPClientInfo tcp_client_data;
unsigned char heartbuff[] = {0xFF, 0xFF, 0xFF, 0xFF};
unsigned char ALL_ON[] = {0xCC, 0xDD, 0xA1, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x9E, 0x3C};	// 全开
unsigned char ALL_OFF[] = {0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xA0, 0x40}; // 全关
unsigned char gpio_16pin_on[16][10] = {
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x01, 0x00, 0x01, 0xA4, 0x48},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x02, 0x00, 0x02, 0xA6, 0x4C},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x04, 0x00, 0x04, 0xAA, 0x54},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x08, 0x00, 0x08, 0xB2, 0x64},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x10, 0x00, 0x10, 0xC2, 0x84},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x20, 0x00, 0x20, 0xE2, 0xC4},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x40, 0x00, 0x40, 0x22, 0x44},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x80, 0x00, 0x80, 0xA2, 0x44},
	{0xCC, 0xDD, 0xA1, 0x01, 0x01, 0x00, 0x01, 0x00, 0xA4, 0x48},
	{0xCC, 0xDD, 0xA1, 0x01, 0x02, 0x00, 0x02, 0x00, 0xA6, 0x4C},
	{0xCC, 0xDD, 0xA1, 0x01, 0x04, 0x00, 0x04, 0x00, 0xAA, 0x54},
	{0xCC, 0xDD, 0xA1, 0x01, 0x08, 0x00, 0x08, 0x00, 0xB2, 0x64},
	{0xCC, 0xDD, 0xA1, 0x01, 0x10, 0x00, 0x10, 0x00, 0xC2, 0x84},
	{0xCC, 0xDD, 0xA1, 0x01, 0x20, 0x00, 0x20, 0x00, 0xE2, 0xC4},
	{0xCC, 0xDD, 0xA1, 0x01, 0x40, 0x00, 0x40, 0x00, 0x22, 0x44},
	{0xCC, 0xDD, 0xA1, 0x01, 0x80, 0x00, 0x80, 0x00, 0xA2, 0x44}};

unsigned char gpio_16pin_off[16][10] = {
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x00, 0x01, 0xA3, 0x46},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x00, 0x02, 0xA4, 0x48},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x00, 0x04, 0xA6, 0x4C},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x00, 0x08, 0xAA, 0x54},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x00, 0x10, 0xB2, 0x64},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x00, 0x20, 0xC2, 0x84},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x00, 0x40, 0xE2, 0xC4},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x00, 0x80, 0x22, 0x44},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x01, 0x00, 0xA3, 0x46},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x02, 0x00, 0xA4, 0x48},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x04, 0x00, 0xA6, 0x4C},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x08, 0x00, 0xAA, 0x54},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x10, 0x00, 0xB2, 0x64},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x20, 0x00, 0xC2, 0x84},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x40, 0x00, 0xE2, 0xC4},
	{0xCC, 0xDD, 0xA1, 0x01, 0x00, 0x00, 0x80, 0x00, 0x22, 0x44}};

struct RelayCmd
{
unsigned char header[2];
unsigned char funcode;
unsigned char addr;
unsigned short contrlBit;
unsigned short enablelBit;
unsigned char crcH;
unsigned char crcL;
};

struct RelayCmd relayCmd={0xCC,0xDD,0xA1,0x01,0,0,0xA2,0x44};


void *test_fun(void *);
void DisplayListDeviceInfo();
void *SocketPthread_func(void *);
/*设置安防继电器服务端的TCP ip和端口*/
int SetTcpServerConfigAPI(const char *tcp_server_ip, int tcp_server_port);
/*安防继电器信号控制*/
int securityRelayAlarmSingnalAPI(int gpioNum, int gpioState);
/*关闭套接字，清理线程*/
void CloseSocketfd();

void *dowork(void *);
std::vector<int> electric_relay_flags;

void parameterServerCallback(const std_msgs::msg::String::SharedPtr msg);
void electric_relay_callback(const std_msgs::msg::Int8MultiArray::SharedPtr msg);
void timerCallback();
rclcpp::Node::SharedPtr node;
rclcpp::TimerBase::SharedPtr timer_;


#endif
